<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vpnsouthafrica.github.io/news/article-62454.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>ES6基础语法之模块化介绍_基础知识</title>
    <link rel="icon" href="/assets/website/img/v2raynode/favicon.ico" type="image/x-icon"/>
        <meta name="description" content="ES6 引入了模块化， ES6 的模块化分为导出（export） @与导入（import）两个模块。 ES6模块化特点： （1）ES6 的模块自动开启严格模式，不管你有没有在模块头部加上 use st" />
    
    <meta name="author" content="免费南非VPN 订阅机场节点中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnsouthafrica.github.io/news/article-62454.htm" />
    <meta property="og:site_name" content="免费南非VPN 订阅机场节点中文网" />
    <meta property="og:title" content="ES6基础语法之模块化介绍_基础知识" />
    <meta property="og:image" content="https://vpnsouthafrica.github.io/uploads/20240303/03685682a91d61381790d1b7e1579f45.webp" />
        <meta property="og:release_date" content="2025-02-24T09:18:20" />
    <meta property="og:updated_time" content="2025-02-24T09:18:20" />
        <meta property="og:description" content="ES6 引入了模块化， ES6 的模块化分为导出（export） @与导入（import）两个模块。 ES6模块化特点： （1）ES6 的模块自动开启严格模式，不管你有没有在模块头部加上 use st" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="ES6基础语法之模块化介绍_基础知识">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google-fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- //google-fonts -->
    <!-- Template CSS Style link -->
    <link rel="stylesheet" href="/assets/website/css/v2raynode/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-WJJ788C1MD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-WJJ788C1MD');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container-fluid">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand d-flex align-items-center" href="/">
                                    <span>免费南非VPN</span>
                                </a>

                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                            </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="cont-ser-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--//header-->
    <!-- inner banner -->
    <div class="inner-banner">
        <section class="w3l-breadcrumb">
            <div class="container">
                <h1 class="inner-text-title font-weight-bold text-white mb-sm-3 mb-2" style="line-height: 3rem;word-break: break-all;">ES6基础语法之模块化介绍_基础知识</h1>
                <ul class="breadcrumbs-custom-path">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span><a href="/news/">新闻资讯</a></li>
                    <li class="active"><span class="fa fa-chevron-right mx-2" aria-hidden="true"></span>正文</li>
                </ul>
            </div>
        </section>
    </div>
    <!-- //inner banner -->
    <!-- about section -->
    <section class="video-section py-5">
        <div class="container py-md-5 py-4">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<p>ES6 引入了模块化， ES6 的模块化分为导出（export） @与导入（import）两个模块。</p> <p><strong>ES6模块化特点：</strong></p> <p>（1）ES6 的模块自动开启严格模式，不管你有没有在模块头部加上 <strong>use strict;</strong>。</p> <p>（2） 模块中可以导入和导出各种类型的变量，如函数，对象，字符串，数字，布尔值，类等。</p> <p>（3） 每个模块都有自己的上下文，每一个模块内声明的变量都是局部变量，不会污染全局作用域。</p> <p>（4） 每一个模块只加载一次（是单例的）， 若再去加载同目录下同文件，直接从内存中读取。</p> <h2>一、export与import基本使用</h2> <p><strong>export 命令用于导出， import 命令 用于导入：</strong></p> <p>module1.js</p> <div class="ay1code"> <pre class="brush:js;">// export let name = "孙悟空";  // export let sex = "男";  //或  let name = "孙悟空";  let sex = "男";  export {name,sex};</pre> </div> <p>test1.js</p> <div class="ay1code"> <pre class="brush:js;">// import { name,sex } from "../export/module1.js";  // console.log(name); //孙悟空  // console.log(sex);  //男  //或导入部分变量  import { sex } from "../export/module1.js";  console.log(sex);  //男</pre> </div> <p>Demo01.html</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;!--       module1.js:模块代码,通过export暴露变量      test1.js:导入module1.js提供的变量      Demo01.html:引入test1.js内容  --&gt;  &lt;script type="module" src="import/test1.js"&gt;&lt;/script&gt;</pre> </div> <h2>二、网页中直接import模块</h2> <p>module1.js</p> <div class="ay1code"> <pre class="brush:js;">// export let name = "孙悟空";  // export let sex = "男";  //或  let name = "孙悟空";  let sex = "男";  export {name,sex};</pre> </div> <p>HTML:</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;!DOCTYPE html&gt;  &lt;html&gt;  	&lt;head&gt;  		&lt;meta charset="utf-8"&gt;  		&lt;title&gt;网页中import模块&lt;/title&gt;  	&lt;/head&gt;  	&lt;body&gt;  		&lt;h1&gt;姓名:&lt;span id="spanName"&gt;&lt;/span&gt;&lt;/h1&gt;  		&lt;h1&gt;性别:&lt;span id="spanSex"&gt;&lt;/span&gt;&lt;/h1&gt;  	&lt;/body&gt;  &lt;/html&gt;  &lt;!--    module1.js:模块代码,通过export暴露变量   Demo02.html:导入module1.js提供的变量   --&gt;  &lt;script type="module"&gt;  	import {name,sex} from "./export/module1.js";  	document.getElementById("spanName").innerHTML = name;  	document.getElementById("spanSex").innerHTML = sex;  &lt;/script&gt;</pre> </div> <h2>三、as的使用</h2> <p><strong>（1）as在export中的用法：</strong>变量使用别名,隐藏模块内部的变量</p> <p>module2.js：</p> <div class="ay1code"> <pre class="brush:js;">let name = "孙悟空";  let sex = "男";  export {name as expName,sex as expSex};</pre> </div> <p>HTML:</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;!DOCTYPE html&gt;  &lt;html&gt;  	&lt;head&gt;  		&lt;meta charset="utf-8"&gt;  		&lt;title&gt;as在export中的用法&lt;/title&gt;  	&lt;/head&gt;  	&lt;body&gt;  		&lt;h1&gt;姓名:&lt;span id="spanName"&gt;&lt;/span&gt;&lt;/h1&gt;  		&lt;h1&gt;性别:&lt;span id="spanSex"&gt;&lt;/span&gt;&lt;/h1&gt;  	&lt;/body&gt;  &lt;/html&gt;  &lt;!--    module2.js:模块代码,通过export暴露变量(变量使用别名,隐藏模块内部的变量)   Demo03.html:导入module2.js提供的变量   --&gt;  &lt;script type="module"&gt;  	import {expName,expSex} from "./export/module2.js";  	document.getElementById("spanName").innerHTML = expName;  	document.getElementById("spanSex").innerHTML = expSex;  &lt;/script&gt;</pre> </div> <p><strong>（2）as在import中的用法：</strong>导入多个模块的变量,使用as解决命名冲突。</p> <p>module1.js</p> <div class="ay1code"> <pre class="brush:js;">// export let name = "孙悟空";  // export let sex = "男";  //或  let name = "孙悟空";  let sex = "男";  export {name,sex};</pre> </div> <p>module3.js</p> <div class="ay1code"> <pre class="brush:js;">// export let name = "孙悟空";  // export let sex = "男";  //或  let name = "猪八戒";  let sex = "男";  export {name,sex};</pre> </div> <p>HTML:</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;!DOCTYPE html&gt;  &lt;html&gt;  	&lt;head&gt;  		&lt;meta charset="utf-8"&gt;  		&lt;title&gt;as在import中的用法&lt;/title&gt;  	&lt;/head&gt;  	&lt;body&gt;  		&lt;h1&gt;姓名:&lt;span id="spanName1"&gt;&lt;/span&gt;&lt;/h1&gt;  		&lt;h1&gt;性别:&lt;span id="spanSex1"&gt;&lt;/span&gt;&lt;/h1&gt;  		&lt;hr /&gt;  		&lt;h1&gt;姓名:&lt;span id="spanName2"&gt;&lt;/span&gt;&lt;/h1&gt;  		&lt;h1&gt;性别:&lt;span id="spanSex2"&gt;&lt;/span&gt;&lt;/h1&gt;  	&lt;/body&gt;	  &lt;/html&gt;  &lt;!--    module1.js:模块代码(暴露name,sex)   module3.js:模块代码(暴露name,sex)   Demo04.html:导入两个模块的变量,使用as解决命名冲突   --&gt;  &lt;script type="module"&gt;  	import {name as name1,sex as sex1} from "./export/module1.js";  	import {name as name2,sex as sex2} from "./export/module3.js";  	document.getElementById("spanName1").innerHTML = name1;  	document.getElementById("spanSex1").innerHTML = sex1;  	document.getElementById("spanName2").innerHTML = name2;  	document.getElementById("spanSex2").innerHTML = sex2;  &lt;/script&gt;</pre> </div> <h2>四、导入模块中的函数和类</h2> <h3>（1）导入模块中的函数</h3> <p>module4.js</p> <div class="ay1code"> <pre class="brush:js;">// function Add(...items)  // {  // 	let sum = 0;  // 	for(let item of items)  // 	{  // 		sum += item;  // 	}  // 	return sum;  // }  // export{Add};  //或  export function Add(...items)  {  	let sum = 0;  	for(let item of items)  	{  		sum += item;  	}  	return sum;  };</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:js;">&lt;script type="module"&gt;  	//导入函数  	import {Add} from './export/module4.js';  	let result = Add(1,2,3,4,5);  	console.log(result); //15  &lt;/script&gt;</pre> </div> <h3>（2）导入模块中的类：</h3> <p>module4.js</p> <div class="ay1code"> <pre class="brush:js;">// class Student  // {  // 	constructor(stuno,stuname)   // 	{  // 		this.stuno = stuno;  // 		this.stuname = stuname;  // 	}  // 	sayHi()  // 	{  // 		console.log("大家好,我是"+this.stuname+",我的学号是"+this.stuno);  // 	}  // }  // export {Student};  //或  export class Student  {  	constructor(stuno,stuname)   	{  		this.stuno = stuno;  		this.stuname = stuname;  	}  	sayHi()  	{  		console.log("大家好,我是"+this.stuname+",我的学号是"+this.stuno);  	}  }</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;script type="module"&gt;  	//导入类  	import {Student} from './export/module4.js';  	let stu = new Student("001","孙悟空");  	stu.sayHi();  &lt;/script&gt;</pre> </div> <h2>五、import的特点</h2> <p>module5.js</p> <div class="ay1code"> <pre class="brush:js;">let name = "孙悟空";  let sex = "男";  let emp = {name:"孙悟空",sex:"男"};  export {name,sex,emp};</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;script type="module"&gt;  	//只读特点  	//import {name,sex,emp} from './export/module5.js';  	//(1)普通类型的值不能改变  	// name = "猪八戒"; //报错  	// sex = "男";//报错  	//(2)不能直接改变对象  	//emp = {name:"猪八戒",sex:"男"};  	//(3)可以改变变量的属性值  	// emp.name = "猪八戒";  	// emp.sex = "男";  	  	//单例特点  	//(1)下面两句import只会执行一次  	//import {name,sex,emp} from './export/module5.js';  	//import {name,sex,emp} from './export/module5.js';  	//(2)下面两句import相当于 import {name,sex} from './export/module5.js';  	// import {name} from './export/module5.js';  	// import {sex} from './export/module5.js';  	  	//静态特点  	//(1)不支持表达式  	//import {"na"+"me"} from './export/module5.js'; //报错  	//(2)不支持动态导入,以下代码也会报错  	// if(true)  	// 	import {name,sex} from './export/module5.js';  	// else  	// 	import {emp} from './export/module5.js';	  &lt;/script&gt;</pre> </div> <h2>六、模块的整体import加载</h2> <p>module5.js</p> <div class="ay1code"> <pre class="brush:js;">let name = "孙悟空";  let sex = "男";  let emp = {name:"孙悟空",sex:"男"};  export {name,sex,emp};</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;script type="module"&gt;  	//加载module5中所有暴露出来的内容  	import * as test from './export/module5.js';  	console.log(test.name);  	console.log(test.emp.name);  &lt;/script&gt;</pre> </div> <h2>七、export default命令</h2> <p>使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载，export default 向外暴露的</p> <p>成员，可以使用任意变量来接收，解决上述问题。</p> <p><strong>export default 命令特点:</strong></p> <p>（1）在一个文件或模块中，export、import 可以有多个，export default 仅有一个。</p> <p>（2）export default 中的 default 是对应的导出接口变量。</p> <p>（3）导入导出不需要{}符号。</p> <p>（4）export default 向外暴露的成员，可以使用任意变量来接收。</p> <h3>（1）export default导出变量</h3> <p>module6.js</p> <div class="ay1code"> <pre class="brush:js;">//export default导出变量不需要var    //export var a = 10; // 正确    // 正确  var a = 10;  export default a;    // 错误  //export default var a = 10;</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;script type="module"&gt;  	//接受默认变量  	import b from './export/module6.js'; //此处可以用任意变量(b)来接受  	console.log(b);  &lt;/script&gt;</pre> </div> <h3>（2）export default导出函数</h3> <p>module6.js</p> <div class="ay1code"> <pre class="brush:js;">function Add(...items)  {  	let sum = 0;  	for(let item of items)  	{  		sum += item;  	}  	return sum;  }  //此处Add不需要{}  export default Add</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;script type="module"&gt;  	//接受默认函数  	import sum from './export/module6.js'; //此处可以用任意变量(sum)来接受  	let result = sum(1,2,3,4,5);  	console.log(result);  &lt;/script&gt;</pre> </div> <h2>八、export与import的复合写法</h2> <p>export 与 import 可以在同一模块使用，我们称为复合使用。</p> <h3>（1）复合使用的基本语法</h3> <p>module1.js</p> <div class="ay1code"> <pre class="brush:js;">// export let name = "孙悟空";  // export let sex = "男";  //或  let name = "孙悟空";  let sex = "男";  export {name,sex};</pre> </div> <p>module7.js</p> <div class="ay1code"> <pre class="brush:js;">//复合使用的语法  let emp = {name:"猪八戒",sex:"男"};    export { name, sex } from './module1.js';  // //上面的export等于如下：  // // import { name, sex } from './module1.js';  // // export { name, sex };    export {emp}</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;script type="module"&gt;  	//导入module7,在module7中导出module1内容  	import {name,sex,emp} from "./export/module7.js";  	console.log(name);  	console.log(emp.name);  &lt;/script&gt;</pre> </div> <h3>（2）复合写法实现接口改名</h3> <p>module1.js</p> <div class="ay1code"> <pre class="brush:js;">// export let name = "孙悟空";  // export let sex = "男";  //或  let name = "孙悟空";  let sex = "男";  export {name,sex};</pre> </div> <p>module7.js</p> <div class="ay1code"> <pre class="brush:js;">//复合写法实现接口改名  let emp = {name:"猪八戒",sex:"男"};  export { name as myname, sex as mysex } from './module1.js';  export {emp}</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;script type="module"&gt;  	//导入改名后的变量  	// import {myname,mysex,emp} from "./export/module7.js";  	// console.log(myname);  	// console.log(emp.name);	  &lt;/script&gt;</pre> </div> <h3>（3）转换为默认接口</h3> <p>module1.js</p> <div class="ay1code"> <pre class="brush:js;">// export let name = "孙悟空";  // export let sex = "男";  //或  let name = "孙悟空";  let sex = "男";  export {name,sex};</pre> </div> <p>module7.js</p> <div class="ay1code"> <pre class="brush:js;">// 转换为默认接口  let emp = {name:"猪八戒",sex:"男"};  export {name as default,sex} from './module1.js';  export {emp}</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;script type="module"&gt;  	//导入修改成默认接口的name,使用abc接收  	import abc from "./export/module7.js";  	import {sex,emp} from "./export/module7.js";  	console.log(abc);  	console.log(emp.name);  &lt;/script&gt;</pre> </div> <h3>（4）默认接口转换为命名接口</h3> <p>module6.js</p> <div class="ay1code"> <pre class="brush:js;">function Add(...items)  {  	let sum = 0;  	for(let item of items)  	{  		sum += item;  	}  	return sum;  }  //此处Add不需要{}  export default Add</pre> </div> <p>module7.js</p> <div class="ay1code"> <pre class="brush:js;">//将默认接口转换为命名接口  export {default as sum} from './module6.js';</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;script type="module"&gt;  	//导入默认接口转换成的sum接口  	import {sum} from "./export/module7.js";  	let result = sum(1,2,3,4,5);  	console.log(result);  &lt;/script&gt;</pre> </div> <h3>（5）导出所有接口</h3> <p>module1.js</p> <div class="ay1code"> <pre class="brush:js;">// export let name = "孙悟空";  // export let sex = "男";  //或  let name = "孙悟空";  let sex = "男";  export {name,sex};</pre> </div> <p>module7.js</p> <div class="ay1code"> <pre class="brush:js;">//导出所有  export * from './module1.js'</pre> </div> <p>HTML</p> <div class="ay1code"> <pre class="brush:xhtml;">&lt;script type="module"&gt;  	//接收导出的所有接口  	import {name,sex} from "./export/module7.js";  	console.log(name);  	console.log(sex);  &lt;/script&gt;</pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-62453.htm">审视Scrum Master的检查清单</a></p>
                                        <p>下一个：<a href="/news/article-63044.htm">被猫抓了一下轻微破皮要***吗多少钱一只（被猫抓了一下轻微破皮要***吗多少钱一只）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-60699.htm" title="动物疫苗知识点总结大全（动物疫苗的种类有哪些）">动物疫苗知识点总结大全（动物疫苗的种类有哪些）</a></li>
                        <li class="py-2"><a href="/news/article-63044.htm" title="被猫抓了一下轻微破皮要***吗多少钱一只（被猫抓了一下轻微破皮要***吗多少钱一只）">被猫抓了一下轻微破皮要***吗多少钱一只（被猫抓了一下轻微破皮要***吗多少钱一只）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-21-free-node-subscribe.htm" title="免费南非VPN | 2月21日22.4M/S|免费V2ray/Clash/SSR/Shadowrocket免费节点订阅分享">免费南非VPN | 2月21日22.4M/S|免费V2ray/Clash/SSR/Shadowrocket免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-64258.htm" title="Android开发基础——Activity生命周期">Android开发基础——Activity生命周期</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-25-free-v2ray.htm" title="免费南非VPN | 2月25日18.6M/S|免费Clash/V2ray/Shadowrocket/SSR免费节点订阅分享">免费南非VPN | 2月25日18.6M/S|免费Clash/V2ray/Shadowrocket/SSR免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-61849.htm" title="2021年河南动物疫苗采购结果（2021年河南动物疫苗采购结果公告）">2021年河南动物疫苗采购结果（2021年河南动物疫苗采购结果公告）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-23-clash-v2ray-ss-ssr.htm" title="免费南非VPN | 2月23日21.5M/S|免费V2ray/SSR/Clash/Shadowrocket免费节点订阅分享">免费南非VPN | 2月23日21.5M/S|免费V2ray/SSR/Clash/Shadowrocket免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-63045.htm" title="网上的无货源网店是真的吗可信吗（网上无货源开网店是真的吗）">网上的无货源网店是真的吗可信吗（网上无货源开网店是真的吗）</a></li>
                        <li class="py-2"><a href="/news/article-62454.htm" title="ES6基础语法之模块化介绍_基础知识">ES6基础语法之模块化介绍_基础知识</a></li>
                        <li class="py-2"><a href="/news/article-60700.htm" title="济南宠物狗（济南宠物狗寄养价格）">济南宠物狗（济南宠物狗寄养价格）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </section>
    <!-- //about section -->
        <!-- footer -->
    <footer class="w3l-footer-22 position-relative mt-5 pt-5">
        
        <!-- copyright -->
        <div class="copyright-footer text-center">
            <div class="container">
                <div class="columns">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>免费南非VPN 订阅机场节点中文网 版权所有</p>
                    <p>Powered by WordPress</p>
                </div>
            </div>
        </div>
        <!-- //copyright -->
    </footer>
    <!-- //footer -->
    <!-- Js scripts -->
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-level-up" aria-hidden="true"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- //move top -->
    <!-- common jquery plugin -->
    <script src="/assets/website/js/frontend/v2raynode/jquery-3.5.1.min.js"></script>
    <!-- //common jquery plugin -->
    <!-- banner slider -->
    <script src="/assets/website/js/frontend/v2raynode/owl.carousel.js"></script>
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: true,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //banner slider -->
    <!-- counter for stats -->
    <script src="/assets/website/js/frontend/v2raynode/counter.js"></script>
    <!-- //counter for stats -->
    <!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/v2raynode/theme-change.js"></script>
    <script>
    function autoType(elementClass, typingSpeed) {
        var thhis = $(elementClass);
        thhis.css({
            "position": "relative",
            "display": "inline-block"
        });
        thhis.prepend('<div class="cursor" style="right: initial; left:0;"></div>');
        thhis = thhis.find(".text-js");
        var text = thhis.text().trim().split('');
        var amntOfChars = text.length;
        var newString = "";
        thhis.text("|");
        setTimeout(function() {
            thhis.css("opacity", 1);
            thhis.prev().removeAttr("style");
            thhis.text("");
            for (var i = 0; i < amntOfChars; i++) {
                (function(i, char) {
                    setTimeout(function() {
                        newString += char;
                        thhis.text(newString);
                    }, i * typingSpeed);
                })(i + 1, text[i]);
            }
        }, 1500);
    }

    $(document).ready(function() {
        // Now to start autoTyping just call the autoType function with the 
        // class of outer div
        // The second paramter is the speed between each letter is typed.   
        autoType(".type-js", 200);
    });
    </script>
    <!-- //theme switch js (light and dark)-->
    <!-- MENU-JS -->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!-- //MENU-JS -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- //disable body scroll which navbar is in active -->
    <!--bootstrap-->
    <script src="/assets/website/js/frontend/v2raynode/bootstrap.min.js"></script>
    <!-- //bootstrap-->
    <!-- //Js scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>